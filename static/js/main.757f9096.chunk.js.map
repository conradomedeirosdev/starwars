{"version":3,"sources":["Services/Services.js","Context/StarWarsContext.js","Provider/StarWarsProvider.jsx","Components/Table.jsx","Components/FilteredText.jsx","Components/FilteredNumber.jsx","App.js","serviceWorker.js","index.js"],"names":["getSWAPI","fetch","then","res","json","response","catch","error","alert","StarWarsContext","createContext","StarWarsProvider","children","useState","planets","sucess","data","setData","newData","setNewData","filterText","setfilterText","context","fetchStarWars","results","Provider","value","bodyTable","map","Object","values","filter","index","bodyOfTag","planet","includes","key","tag","generateTable","keys","headOfTag","Table","useContext","select","FilteredText","className","type","onChange","e","target","placeholder","FilteredNumber","comparison","setComparison","setValue","setSelect","data-testid","name","onClick","Number","filterMain","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.757f9096.chunk.js","sourcesContent":["const SWAPI = 'https://swapi.co/api/planets';\n\nfunction getSWAPI() {\n  return fetch(SWAPI)\n    .then((res) => res.json())\n    .then((response) => response)\n    .catch((error) => alert(error));\n}\n\nexport default getSWAPI;\n","import { createContext } from 'react';\n\nconst StarWarsContext = createContext();\n\nexport default StarWarsContext;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport getSWAPI from '../Services/Services';\nimport StarWarsContext from '../Context/StarWarsContext';\n\nconst StarWarsProvider = ({ children }) => {\n  const [data, setData] = useState({ planets: [], sucess: false });\n  const [newData, setNewData] = useState();\n  const [filterText, setfilterText] = useState('');\n\n\n  const fetchStarWars = () => {\n    if (data.sucess) return;\n    getSWAPI()\n      .then((planets) => {\n        setData({ planets: planets.results, sucess: true });\n      });\n  };\n\n  const context = {\n    data,\n    fetchStarWars,\n    filterText,\n    setfilterText,\n    newData,\n    setNewData,\n  };\n\n  return (\n    <StarWarsContext.Provider value={context}>\n      {children}\n    </StarWarsContext.Provider>\n  );\n};\n\nStarWarsProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\n\nexport default StarWarsProvider;\n","import React, { useContext } from \"react\";\nimport StarWarsContext from \"../Context/StarWarsContext\";\n\nconst headOfTag = data => {\n  return data.map(planets => {\n    return Object.keys(planets).filter(tag => {\n      return tag !== \"residents\";\n    });\n  })[0];\n};\n\nconst bodyOfTag = data => {\n  return data.map(planets => {\n    return Object.values(planets).filter((value, index) => {\n      return index !== 9;\n    });\n  });\n};\n\nconst bodyTable = (data, filterText) => {\n  // console.log(data);\n  return bodyOfTag(data).map(planet => {\n    if (planet[0].includes(filterText)) {\n      return (\n        <tr key={planet[0]}>\n          {planet.map(tag => (\n            <td key={tag}>{tag}</td>\n          ))}\n        </tr>\n      );\n    }\n  });\n};\n\nconst generateTable = (data, filterText) => {\n  return (\n    <table>\n      <thead>\n        <tr>\n          {headOfTag(data).map(tag => {\n            return <th key={tag}>{tag}</th>;\n          })}\n        </tr>\n      </thead>\n      <tbody>{bodyTable(data, filterText)}</tbody>\n    </table>\n  );\n};\n\nconst Table = () => {\n  const { data, select, fetchStarWars, filterText, newData } = useContext(\n    StarWarsContext\n  );\n  fetchStarWars();\n\n  // const newDataTable = () => {\n  //   if (newData !== []) {\n  //     return data === newData;\n  //   }\n  // };\n  // newDataTable();\n\n  if (!data.sucess) {\n    return <div>Loading...</div>;\n  }\n  if (newData) {\n    return <div>{generateTable(newData, filterText, select)}</div>;\n  }\n\n  return <div>{generateTable(data.planets, filterText, select)}</div>;\n};\n\nexport default Table;\n","import React, { useContext } from 'react';\nimport StarWarsContext from '../Context/StarWarsContext';\nimport '../Style/FilteredText.css';\n\nconst FilteredText = () => {\n  const { setfilterText } = useContext(StarWarsContext);\n\n  return (\n    <div>\n      <input\n        className=\"input-text\"\n        type=\"text\"\n        onChange={(e) => setfilterText(e.target.value)}\n        placeholder=\"Pesquise aqui\"\n      />\n    </div>\n  );\n\n};\n\nexport default FilteredText;\n","import React, { useContext, useState} from 'react';\nimport StarWarsContext from '../Context/StarWarsContext';\nimport '../Style/FilteredNumber.css';\n\n\nconst filterMain = (comparison, value, select, data) => {\n  if (comparison === '' || value === '' || select === '') {\n    return alert('tá faltando dado aí!');\n  }\n  switch (comparison) {\n    case 'Maior que':\n      return data.filter((planet) => {\n        return planet[select] > Number(value) && planet[select] !== 'unknown';\n      });\n\n    case 'Menor que':\n      return data.filter((planet) => {\n        return planet[select] < Number(value) && planet[select] !== 'unknown';\n      });\n\n    case 'Igual a':\n      return data.filter((planet) => {\n        return planet[select] === value && planet[select] !== 'unknown';\n      });\n    default:\n      break;\n  }\n};\n\nconst FilteredNumber = () => {\n  const [comparison, setComparison] = useState('');\n  const [value, setValue] = useState('0');\n  const [select, setSelect] = useState('');\n  const { data, fetchStarWars, setNewData } = useContext(StarWarsContext);\n\n  // console.log('data table', data);\n  fetchStarWars();\n\n  return (\n    <div className=\"content-filter\">\n      <select className=\"select-comparison\" onChange={(e) => setSelect(e.target.value)}>\n        <option value=\"\"></option>\n        <option value=\"population\">population</option>\n        <option value=\"orbital_period\">orbital_period</option>\n        <option value=\"diameter\">diameter</option>\n        <option value=\"rotation_period\">rotation_period</option>\n        <option value=\"surface_water\">surface_water</option>\n      </select>\n      <div className=\"radio-coparison\">\n        <input\n          data-testid=\"radio-comparison-maior\"\n          type=\"radio\"\n          name=\"comparison\"\n          value=\"Maior que\"\n          onClick={(e) => setComparison(e.target.value)}\n        />\n        Maior que\n        <input\n          data-testid=\"radio-comparison-menor\"\n          type=\"radio\"\n          name=\"comparison\"\n          value=\"Menor que\"\n          onClick={(e) => setComparison(e.target.value)}\n        />\n        Menor que\n        <input\n          data-testid=\"radio-comparison-igual\"\n          type=\"radio\"\n          name=\"comparison\"\n          value=\"Igual a\"\n          onClick={(e) => setComparison(e.target.value)}\n        />\n        Igual a\n      </div>\n      <input\n        className=\"input-number-comparison\"\n        type=\"text\"\n        onChange={(e) => setValue(e.target.value)}\n        placeholder=\"Coloque a quantidade aquii\"\n      />\n      <button className=\"btn\" type=\"button\" onClick={() => setNewData(filterMain(comparison, value, select, data.planets))}>filtrar </button>\n    </div>\n  );\n};\n\nexport default FilteredNumber;\n","import React from 'react';\nimport './App.css';\nimport StarWarsProvider from './Provider/StarWarsProvider';\nimport Table from './Components/Table';\nimport FilteredText from './Components/FilteredText';\nimport FilteredNumber from './Components/FilteredNumber';\n\nfunction App() {\n  return (\n    <StarWarsProvider>\n      <header className=\"content-header\">\n        <FilteredText />\n        <FilteredNumber />\n      </header>\n      <Table />\n    </StarWarsProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}